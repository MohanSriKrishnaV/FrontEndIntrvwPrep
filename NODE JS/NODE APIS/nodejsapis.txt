Node.js comes with several **built-in (core) APIs** that you can use without installing any external packages. Here are the most commonly used ones:

---

### âœ… **1. `fs` (File System)**
- For reading, writing, and manipulating files.
```javascript
const fs = require('fs');
fs.readFile('file.txt', 'utf8', (err, data) => console.log(data));
```

---

### âœ… **2. `path`**
- For working with file and directory paths.
```javascript
const path = require('path');
console.log(path.join(__dirname, 'file.txt'));
```

---

### âœ… **3. `http`**
- For creating HTTP servers and making requests.
```javascript
const http = require('http');
http.createServer((req, res) => res.end('Hello World')).listen(3000);
```

---

### âœ… **4. `os`**
- For getting system-related info (CPU, memory, etc.).
```javascript
const os = require('os');
console.log(os.platform(), os.totalmem());
```

---

### âœ… **5. `events`**
- For creating and handling custom events.
```javascript
const EventEmitter = require('events');
const emitter = new EventEmitter();
emitter.on('greet', () => console.log('Hello!'));
emitter.emit('greet');
```

---

### âœ… **6. `crypto`**
- For encryption, hashing, and secure operations.
```javascript
const crypto = require('crypto');
console.log(crypto.randomBytes(16).toString('hex'));
```

---

### âœ… **7. `util`**
- For utility functions like `promisify`.
```javascript
const util = require('util');
```

---

### âœ… **8. `stream`**
- For handling streaming data (files, network).
```javascript
const stream = require('stream');
```

---

### âœ… **9. `url`**
- For parsing and formatting URLs.
```javascript
const url = require('url');
```

---

### âœ… **10. `querystring`**
- For working with query strings in URLs.

---

ðŸ‘‰ Do you want me to **create a cheat sheet with examples for all these Node.js built-in modules** or **a diagram showing how these core APIs fit into Nodeâ€™s architecture**?